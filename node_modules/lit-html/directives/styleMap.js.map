{"version":3,"file":"styleMap.js","sourceRoot":"","sources":["../src/directives/styleMap.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAEH,OAAO,EAAC,aAAa,EAAE,SAAS,EAAa,YAAY,EAAC,MAAM,gBAAgB,CAAC;AAMjF;;;GAGG;AACH,MAAM,aAAa,GAAG,IAAI,OAAO,EAAE,CAAC;AAEpC;;;;GAIG;AACH,oEAAoE;AACpE,MAAM,eAAe,GAAG,IAAI,OAAO,EAAE,CAAC;AAEtC;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,SAAoB,EAA4B,EAAE,CACvE,SAAS,CAAC,CAAC,IAAmB,EAAE,EAAE;IAChC,IAAI,CAAC,CAAC,IAAI,YAAY,aAAa,CAAC,IAAI,CAAC,IAAI,YAAY,YAAY,CAAC;QAClE,IAAI,CAAC,SAAS,CAAC,IAAI,KAAK,OAAO,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;QACtE,MAAM,IAAI,KAAK,CACX,+DAA+D;YAC/D,6CAA6C,CAAC,CAAC;KACpD;IACD,uBAAuB;IACvB,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QAC7B,IAAI,CAAC,SAAS,CAAC,OAAuB,CAAC,KAAK,CAAC,OAAO;YACjD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrC,eAAe,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KACjC;IACD,yCAAyC;IACzC,MAAM,OAAO,GAAG,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACxC,KAAK,MAAM,IAAI,IAAI,OAAO,EAAE;QAC1B,IAAI,CAAC,CAAC,IAAI,IAAI,SAAS,CAAC,EAAE;YACtB,IAAI,CAAC,SAAS,CAAC,OAAuB,CAAC,KAAa,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;SACrE;KACF;IACD,MAAM,CAAC,MAAM,CAAE,IAAI,CAAC,SAAS,CAAC,OAAuB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IACxE,aAAa,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, directive, Directive, PropertyPart} from '../lit-html.js';\n\nexport interface StyleInfo {\n  [name: string]: string;\n}\n\n/**\n * Stores the StyleInfo object applied to a given AttributePart.\n * Used to unset existing values when a new StyleInfo object is applied.\n */\nconst styleMapCache = new WeakMap();\n\n/**\n * Stores AttributeParts that have had static styles applied (e.g. `height: 0;`\n * in style=\"height: 0; ${styleMap()}\"). Static styles are applied only the\n * first time the directive is run on a part.\n */\n// Note, could be a WeakSet, but prefer not requiring this polyfill.\nconst styleMapStatics = new WeakMap();\n\n/**\n * A directive that applies CSS properties. This must be used in the `style`\n * attribute and must be the only part used in the attribute. It takes the\n * property names in the `styleInfo` object and adds the property values as a\n * css style propertes. For example `{backgroundColor: 'red', borderTop: '5px'}`\n * sets these properties to the element's style.\n * @param styleInfo {StyleInfo}\n */\nexport const styleMap = (styleInfo: StyleInfo): Directive<AttributePart> =>\n    directive((part: AttributePart) => {\n      if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n          part.committer.name !== 'style' || part.committer.parts.length > 1) {\n        throw new Error(\n            'The `styleMap` directive must be used in the style attribute ' +\n            'and must be the only part in the attribute.');\n      }\n      // handle static styles\n      if (!styleMapStatics.has(part)) {\n        (part.committer.element as HTMLElement).style.cssText =\n            part.committer.strings.join(' ');\n        styleMapStatics.set(part, true);\n      }\n      // remove old styles that no longer apply\n      const oldInfo = styleMapCache.get(part);\n      for (const name in oldInfo) {\n        if (!(name in styleInfo)) {\n          ((part.committer.element as HTMLElement).style as any)[name] = null;\n        }\n      }\n      Object.assign((part.committer.element as HTMLElement).style, styleInfo);\n      styleMapCache.set(part, styleInfo);\n    });"]}