{"version":3,"file":"updating-element.js","sourceRoot":"","sources":["../src/lib/updating-element.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * Converts property values to and from attribute values.\n */\ninterface AttributeSerializer<T = any> {\n\n  /**\n   * Deserializing function called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string): T;\n\n  /**\n   * Serializing function called to convert a property value to an attribute\n   * value.\n   */\n  toAttribute?(value: T): string|null;\n}\n\ntype AttributeType<T = any> = AttributeSerializer<T>|((value: string) => T);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<T = any> {\n\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  attribute?: boolean|string;\n\n  /**\n   * Indicates how to serialize and deserialize the attribute to/from a\n   * property. If this value is a function, it is used to deserialize the\n   * attribute value a the property value. If it's an object, it can have keys\n   * for `fromAttribute` and `toAttribute` where `fromAttribute` is the\n   * deserialize function and `toAttribute` is a serialize function used to set\n   * the property to an attribute. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute.\n   */\n  type?: AttributeType<T>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property serialized using the rules\n   * from the `type` property option.\n   */\n  reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: T, oldValue: T): boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\nexport type PropertyValues = Map<PropertyKey, unknown>;\n\n// serializer/deserializers for boolean attribute\nconst fromBooleanAttribute = (value: string) => value !== null;\nconst toBooleanAttribute = (value: string) => value ? '' : null;\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute : true,\n  type : String,\n  reflect : false,\n  hasChanged : notEqual\n};\n\nconst microtaskPromise = new Promise((resolve) => resolve(true));\n\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING = 1 << 3;\ntype UpdateState = typeof STATE_HAS_UPDATED|typeof STATE_UPDATE_REQUESTED|\n    typeof STATE_IS_REFLECTING;\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport abstract class UpdatingElement extends HTMLElement {\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute\n   * to `fooBar` property.\n   */\n  private static _attributeToPropertyMap: AttributeMap = new Map();\n\n  /**\n   * Marks class as having finished creating properties.\n   */\n  private static _finalized = true;\n\n  /**\n   * Memoized list of all class properties, including any superclass properties.\n   */\n  private static _classProperties: PropertyDeclarationMap = new Map();\n\n  static properties: PropertyDeclarations = {};\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   */\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're _finalized.\n    this._finalize();\n    const attributes = [];\n    for (const [p, v] of this._classProperties) {\n      const attr = this._attributeNameForProperty(p, v);\n      if (attr !== undefined) {\n        this._attributeToPropertyMap.set(attr, p);\n        attributes.push(attr);\n      }\n    }\n    return attributes;\n  }\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist.\n   * The property setter calls the property's `hasChanged` property option\n   * or uses a strict identity check to determine whether or not to request\n   * an update.\n   */\n  static createProperty(name: PropertyKey,\n                        options:\n                            PropertyDeclaration = defaultPropertyDeclaration) {\n    // ensure private storage for property declarations.\n    if (!this.hasOwnProperty('_classProperties')) {\n      this._classProperties = new Map();\n      // NOTE: Workaround IE11 not supporting Map constructor argument.\n      const superProperties = Object.getPrototypeOf(this)._classProperties;\n      if (superProperties !== undefined) {\n        superProperties.forEach((v: any, k: PropertyKey) =>\n                                    this._classProperties.set(k, v));\n      }\n    }\n    this._classProperties.set(name, options);\n    // Allow user defined accessors by not replacing an existing own-property\n    // accessor.\n    if (this.prototype.hasOwnProperty(name)) {\n      return;\n    }\n    const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n    Object.defineProperty(this.prototype, name, {\n      get() { return this[key]; },\n      set(value) {\n        const oldValue = this[name];\n        this[key] = value;\n        this._requestPropertyUpdate(name, oldValue, options);\n      },\n      configurable : true,\n      enumerable : true\n    });\n  }\n\n  /**\n   * Creates property accessors for registered properties and ensures\n   * any superclasses are also finalized.\n   */\n  private static _finalize() {\n    if (this.hasOwnProperty('_finalized') && this._finalized) {\n      return;\n    }\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this);\n    if (typeof superCtor._finalize === 'function') {\n      superCtor._finalize();\n    }\n    this._finalized = true;\n    // initialize Map populated in observedAttributes\n    this._attributeToPropertyMap = new Map();\n    // make any properties\n    const props = this.properties;\n    // support symbols in properties (IE11 does not support this)\n    const propKeys = [\n      ...Object.getOwnPropertyNames(props),\n      ...(typeof Object.getOwnPropertySymbols === 'function')\n          ? Object.getOwnPropertySymbols(props)\n          : []\n    ];\n    for (const p of propKeys) {\n      // note, use of `any` is due to TypeSript lack of support for symbol in\n      // index types\n      this.createProperty(p, (props as any)[p]);\n    }\n  }\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   */\n  private static _attributeNameForProperty(name: PropertyKey,\n                                           options?: PropertyDeclaration) {\n    const attribute = options !== undefined && options.attribute;\n    return attribute === false\n               ? undefined\n               : (typeof attribute === 'string'\n                      ? attribute\n                      : (typeof name === 'string' ? name.toLowerCase()\n                                                  : undefined));\n  }\n\n  /**\n   * Returns true if a property should request an update.\n   * Called when a property value is set and uses the `hasChanged`\n   * option for the property if present or a strict identity check.\n   */\n  private static _valueHasChanged(value: unknown, old: unknown,\n                                  hasChanged: HasChanged = notEqual) {\n    return hasChanged(value, old);\n  }\n\n  /**\n   * Returns the property value for the given attribute value.\n   * Called via the `attributeChangedCallback` and uses the property's `type`\n   * or `type.fromAttribute` property option.\n   */\n  private static _propertyValueFromAttribute(value: string,\n                                             options?: PropertyDeclaration) {\n    const type = options && options.type;\n    if (type === undefined) {\n      return value;\n    }\n    // Note: special case `Boolean` so users can use it as a `type`.\n    const fromAttribute =\n        type === Boolean\n            ? fromBooleanAttribute\n            : (typeof type === 'function' ? type : type.fromAttribute);\n    return fromAttribute ? fromAttribute(value) : value;\n  }\n\n  /**\n   * Returns the attribute value for the given property value. If this\n   * returns undefined, the property will *not* be reflected to an attribute.\n   * If this returns null, the attribute will be removed, otherwise the\n   * attribute will be set to the value.\n   * This uses the property's `reflect` and `type.toAttribute` property options.\n   */\n  private static _propertyValueToAttribute(value: unknown,\n                                           options?: PropertyDeclaration) {\n    if (options === undefined || options.reflect === undefined) {\n      return;\n    }\n    // Note: special case `Boolean` so users can use it as a `type`.\n    const toAttribute =\n        options.type === Boolean\n            ? toBooleanAttribute\n            : (options.type &&\n                   (options.type as AttributeSerializer).toAttribute ||\n               String);\n    return toAttribute(value);\n  }\n\n  private _updateState: UpdateState = 0;\n  private _instanceProperties: PropertyValues|undefined = undefined;\n  private _updatePromise: Promise<unknown> = microtaskPromise;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   */\n  private _changedProperties: PropertyValues = new Map();\n\n  /**\n   * Map with keys of properties that should be reflected when updated.\n   */\n  private _reflectingProperties: Map<PropertyKey, PropertyDeclaration>|\n      undefined = undefined;\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   */\n  protected renderRoot?: Element|DocumentFragment;\n\n  constructor() {\n    super();\n    this.initialize();\n  }\n\n  /**\n   * Performs element initialization. By default this calls `createRenderRoot`\n   * to create the element `renderRoot` node and captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    this.renderRoot = this.createRenderRoot();\n    this._saveInstanceProperties();\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private _saveInstanceProperties() {\n    for (const [p] of (this.constructor as typeof UpdatingElement)\n             ._classProperties) {\n      if (this.hasOwnProperty(p)) {\n        const value = this[p as keyof this];\n        delete this[p as keyof this];\n        if (!this._instanceProperties) {\n          this._instanceProperties = new Map();\n        }\n        this._instanceProperties.set(p, value);\n      }\n    }\n  }\n\n  /**\n   * Applies previously saved instance properties.\n   */\n  private _applyInstanceProperties() {\n    for (const [p, v] of this._instanceProperties!) {\n      (this as any)[p] = v;\n    }\n    this._instanceProperties = undefined;\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   * @returns {Element|DocumentFragment} Returns a node into which to render.\n   */\n  protected createRenderRoot(): Element|ShadowRoot {\n    return this.attachShadow({mode : 'open'});\n  }\n\n  /**\n   * Uses ShadyCSS to keep element DOM updated.\n   */\n  connectedCallback() {\n    if ((this._updateState & STATE_HAS_UPDATED)) {\n      if (window.ShadyCSS !== undefined) {\n        window.ShadyCSS.styleElement(this);\n      }\n    } else {\n      this.requestUpdate();\n    }\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   */\n  attributeChangedCallback(name: string, old: string, value: string) {\n    if (old !== value) {\n      this._attributeToProperty(name, value);\n    }\n  }\n\n  private _propertyToAttribute(\n      name: PropertyKey, value: unknown,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    const ctor = (this.constructor as typeof UpdatingElement);\n    const attrValue = ctor._propertyValueToAttribute(value, options);\n    if (attrValue !== undefined) {\n      const attr = ctor._attributeNameForProperty(name, options);\n      if (attr !== undefined) {\n        // Track if the property is being reflected to avoid\n        // setting the property again via `attributeChangedCallback`. Note:\n        // 1. this takes advantage of the fact that the callback is synchronous.\n        // 2. will behave incorrectly if multiple attributes are in the reaction\n        // stack at time of calling. However, since we process attributes\n        // in `update` this should not be possible (or an extreme corner case\n        // that we'd like to discover).\n        // mark state reflecting\n        this._updateState = this._updateState | STATE_IS_REFLECTING;\n        if (attrValue === null) {\n          this.removeAttribute(attr);\n        } else {\n          this.setAttribute(attr, attrValue);\n        }\n        // mark state not reflecting\n        this._updateState = this._updateState & ~STATE_IS_REFLECTING;\n      }\n    }\n  }\n\n  private _attributeToProperty(name: string, value: string) {\n    // Use tracking info to avoid deserializing attribute value if it was\n    // just set from a property setter.\n    if (!(this._updateState & STATE_IS_REFLECTING)) {\n      const ctor = (this.constructor as typeof UpdatingElement);\n      const propName = ctor._attributeToPropertyMap.get(name);\n      if (propName !== undefined) {\n        const options = ctor._classProperties.get(propName);\n        this[propName as keyof this] =\n            ctor._propertyValueFromAttribute(value, options);\n      }\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should\n   * be called when an element should update based on some state not triggered\n   * by setting a property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored. Returns the `updateComplete` Promise which is resolved\n   * when the update completes.\n   *\n   * @param name {PropertyKey} (optional) name of requesting property\n   * @param oldValue {any} (optional) old value of requesting property\n   * @returns {Promise} A Promise that is resolved when the update completes.\n   */\n  requestUpdate(name?: PropertyKey, oldValue?: any) {\n    if (name !== undefined) {\n      const options = (this.constructor as typeof UpdatingElement)\n                          ._classProperties.get(name) ||\n                      defaultPropertyDeclaration;\n      return this._requestPropertyUpdate(name, oldValue, options);\n    }\n    return this._invalidate();\n  }\n\n  /**\n   * Requests an update for a specific property and records change information.\n   * @param name {PropertyKey} name of requesting property\n   * @param oldValue {any} old value of requesting property\n   * @param options {PropertyDeclaration}\n   */\n  private _requestPropertyUpdate(name: PropertyKey, oldValue: any,\n                                 options: PropertyDeclaration) {\n    if (!(this.constructor as typeof UpdatingElement)\n             ._valueHasChanged(this[name as keyof this], oldValue,\n                               options.hasChanged)) {\n      return this.updateComplete;\n    }\n    // track old value when changing.\n    if (!this._changedProperties.has(name)) {\n      this._changedProperties.set(name, oldValue);\n    }\n    // add to reflecting properties set\n    if (options.reflect === true) {\n      if (this._reflectingProperties === undefined) {\n        this._reflectingProperties = new Map();\n      }\n      this._reflectingProperties.set(name, options);\n    }\n    return this._invalidate();\n  }\n\n  /**\n   * Invalidates the element causing it to asynchronously update regardless\n   * of whether or not any property changes are pending. This method is\n   * automatically called when any registered property changes.\n   */\n  private async _invalidate() {\n    if (!this._hasRequestedUpdate) {\n      // mark state updating...\n      this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n      let resolver: any;\n      const previousValidatePromise = this._updatePromise;\n      this._updatePromise = new Promise((r) => resolver = r);\n      await previousValidatePromise;\n      this._validate();\n      resolver!(!this._hasRequestedUpdate);\n    }\n    return this.updateComplete;\n  }\n\n  private get _hasRequestedUpdate() {\n    return (this._updateState & STATE_UPDATE_REQUESTED);\n  }\n\n  /**\n   * Validates the element by updating it.\n   */\n  private _validate() {\n    // Mixin instance properties once, if they exist.\n    if (this._instanceProperties) {\n      this._applyInstanceProperties();\n    }\n    if (this.shouldUpdate(this._changedProperties)) {\n      const changedProperties = this._changedProperties;\n      this.update(changedProperties);\n      this._markUpdated();\n      if (!(this._updateState & STATE_HAS_UPDATED)) {\n        this._updateState = this._updateState | STATE_HAS_UPDATED;\n        this.firstUpdated(changedProperties);\n      }\n      this.updated(changedProperties);\n    } else {\n      this._markUpdated();\n    }\n  }\n  private _markUpdated() {\n    this._changedProperties = new Map();\n    this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. This getter can be implemented to\n   * await additional state. For example, it is sometimes useful to await a\n   * rendered element before fulfilling this Promise. To do this, first await\n   * `super.updateComplete` then any subsequent state.\n   *\n   * @returns {Promise} The Promise returns a boolean that indicates if the\n   * update resolved without triggering another update.\n   */\n  get updateComplete() { return this._updatePromise; }\n\n  /**\n   * Controls whether or not `update` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated DOM in the element's\n   * `renderRoot`. Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(_changedProperties: PropertyValues) {\n    if (this._reflectingProperties !== undefined &&\n        this._reflectingProperties.size > 0) {\n      for (const [k, v] of this._reflectingProperties) {\n        this._propertyToAttribute(k, this[k as keyof this], v);\n      }\n      this._reflectingProperties = undefined;\n    }\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected updated(_changedProperties: PropertyValues) {}\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {}\n}"]}