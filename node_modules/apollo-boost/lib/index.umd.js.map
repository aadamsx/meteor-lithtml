{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["/* necessary for backward compat */\r\nexport * from 'apollo-client';\r\nexport * from 'apollo-link';\r\nexport * from 'apollo-cache-inmemory';\r\n\r\nimport { Operation, ApolloLink, Observable } from 'apollo-link';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { withClientState, ClientStateConfig } from 'apollo-link-state';\r\nimport { onError, ErrorLink } from 'apollo-link-error';\r\n\r\nimport { ApolloCache } from 'apollo-cache';\r\nimport { InMemoryCache, CacheResolverMap } from 'apollo-cache-inmemory';\r\nimport gql from 'graphql-tag';\r\nimport ApolloClient from 'apollo-client';\r\n\r\nexport { gql, InMemoryCache, HttpLink };\r\n\r\nexport interface PresetConfig {\r\n  request?: (operation: Operation) => Promise<void>;\r\n  uri?: string;\r\n  credentials?: string;\r\n  headers?: any;\r\n  fetch?: GlobalFetch['fetch'];\r\n  fetchOptions?: HttpLink.Options;\r\n  clientState?: ClientStateConfig;\r\n  onError?: ErrorLink.ErrorHandler;\r\n  cacheRedirects?: CacheResolverMap;\r\n  cache?: ApolloCache<any>;\r\n}\r\n\r\n// Yes, these are the exact same as the `PresetConfig` interface. We're\r\n// defining these again so they can be used to verify that valid config\r\n// options are being used in the `DefaultClient` constructor, for clients\r\n// that aren't using Typescript. This duplication is unfortunate, and at\r\n// some point can likely be adjusted so these items are inferred from\r\n// the `PresetConfig` interface using a Typescript transform at compilation\r\n// time. Unfortunately, TS transforms with rollup don't appear to be quite\r\n// working properly, so this will have to be re-visited at some point.\r\n// For now, when updating the properties of the `PresetConfig` interface,\r\n// please also update this constant.\r\nconst PRESET_CONFIG_KEYS = [\r\n  'request',\r\n  'uri',\r\n  'credentials',\r\n  'headers',\r\n  'fetch',\r\n  'fetchOptions',\r\n  'clientState',\r\n  'onError',\r\n  'cacheRedirects',\r\n  'cache',\r\n];\r\n\r\nexport default class DefaultClient<TCache> extends ApolloClient<TCache> {\r\n  constructor(config: PresetConfig = {}) {\r\n    if (config) {\r\n      const diff = Object.keys(config).filter(\r\n        key => PRESET_CONFIG_KEYS.indexOf(key) === -1,\r\n      );\r\n\r\n      if (diff.length > 0) {\r\n        console.warn(\r\n          'ApolloBoost was initialized with unsupported options: ' +\r\n            `${diff.join(' ')}`,\r\n        );\r\n      }\r\n    }\r\n\r\n    const {\r\n      request,\r\n      uri,\r\n      credentials,\r\n      headers,\r\n      fetch,\r\n      fetchOptions,\r\n      clientState,\r\n      cacheRedirects,\r\n      onError: errorCallback,\r\n    } = config;\r\n\r\n    let { cache } = config;\r\n\r\n    if (cache && cacheRedirects) {\r\n      throw new Error(\r\n        'Incompatible cache configuration. If providing `cache` then ' +\r\n          'configure the provided instance with `cacheRedirects` instead.',\r\n      );\r\n    }\r\n\r\n    if (!cache) {\r\n      cache = cacheRedirects\r\n        ? new InMemoryCache({ cacheRedirects })\r\n        : new InMemoryCache();\r\n    }\r\n\r\n    const stateLink = clientState\r\n      ? withClientState({ ...clientState, cache })\r\n      : false;\r\n\r\n    const errorLink = errorCallback\r\n      ? onError(errorCallback)\r\n      : onError(({ graphQLErrors, networkError }) => {\r\n          if (graphQLErrors) {\r\n            graphQLErrors.map(({ message, locations, path }) =>\r\n              // tslint:disable-next-line\r\n              console.log(\r\n                `[GraphQL error]: Message: ${message}, Location: ` +\r\n                  `${locations}, Path: ${path}`,\r\n              ),\r\n            );\r\n          }\r\n          if (networkError) {\r\n            // tslint:disable-next-line\r\n            console.log(`[Network error]: ${networkError}`);\r\n          }\r\n        });\r\n\r\n    const requestHandler = request\r\n      ? new ApolloLink(\r\n          (operation, forward) =>\r\n            new Observable(observer => {\r\n              let handle: any;\r\n              Promise.resolve(operation)\r\n                .then(oper => request(oper))\r\n                .then(() => {\r\n                  handle = forward(operation).subscribe({\r\n                    next: observer.next.bind(observer),\r\n                    error: observer.error.bind(observer),\r\n                    complete: observer.complete.bind(observer),\r\n                  });\r\n                })\r\n                .catch(observer.error.bind(observer));\r\n\r\n              return () => {\r\n                if (handle) {\r\n                  handle.unsubscribe();\r\n                }\r\n              };\r\n            }),\r\n        )\r\n      : false;\r\n\r\n    const httpLink = new HttpLink({\r\n      uri: uri || '/graphql',\r\n      fetch,\r\n      fetchOptions: fetchOptions || {},\r\n      credentials: credentials || 'same-origin',\r\n      headers: headers || {},\r\n    });\r\n\r\n    const link = ApolloLink.from([\r\n      errorLink,\r\n      requestHandler,\r\n      stateLink,\r\n      httpLink,\r\n    ].filter(x => !!x) as ApolloLink[]);\r\n\r\n    // super hacky, we will fix the types eventually\r\n    super({ cache, link } as any);\r\n  }\r\n}\r\n"],"names":["InMemoryCache","withClientState","onError","ApolloLink","Observable","HttpLink","ApolloClient"],"mappings":"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"}