{"version":3,"file":"bundle.umd.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["import { DocumentNode, DirectiveNode } from 'graphql';\n\nimport {\n  checkDocument,\n  removeDirectivesFromDocument,\n} from 'apollo-utilities';\n\nconst connectionRemoveConfig = {\n  test: (directive: DirectiveNode) => directive.name.value === 'client',\n  remove: true,\n};\n\nconst removed = new Map();\nexport function removeClientSetsFromDocument(\n  query: DocumentNode,\n): DocumentNode {\n  // caching\n  const cached = removed.get(query);\n  if (cached) return cached;\n\n  checkDocument(query);\n\n  const docClone = removeDirectivesFromDocument(\n    [connectionRemoveConfig],\n    query,\n  );\n\n  // caching\n  removed.set(query, docClone);\n  return docClone;\n}\n","import {\n  ApolloLink,\n  Observable,\n  Operation,\n  NextLink,\n  FetchResult,\n} from 'apollo-link';\nimport { ApolloCache } from 'apollo-cache';\n\nimport { hasDirectives, getMainDefinition } from 'apollo-utilities';\nimport { graphql } from 'graphql-anywhere/lib/async';\n\nimport { removeClientSetsFromDocument } from './utils';\n\nconst capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);\n\nexport type ClientStateConfig = {\n  cache?: ApolloCache<any>;\n  resolvers: any;\n  defaults?: any;\n  typeDefs?: string | string[];\n};\n\nexport const withClientState = (\n  clientStateConfig: ClientStateConfig = { resolvers: {}, defaults: {} },\n) => {\n  const { resolvers, defaults, cache, typeDefs } = clientStateConfig;\n  if (cache && defaults) {\n    cache.writeData({ data: defaults });\n  }\n\n  return new class StateLink extends ApolloLink {\n    public writeDefaults() {\n      if (cache && defaults) {\n        cache.writeData({ data: defaults });\n      }\n    }\n\n    public request(\n      operation: Operation,\n      forward: NextLink = () => Observable.of({ data: {} }),\n    ): Observable<FetchResult> {\n      if (typeDefs) {\n        const directives = 'directive @client on FIELD';\n        const definition =\n          typeof typeDefs === 'string'\n            ? typeDefs\n            : typeDefs.map(typeDef => typeDef.trim()).join('\\n');\n\n        operation.setContext(({ schemas = [] }) => ({\n          schemas: schemas.concat([{ definition, directives }]),\n        }));\n      }\n\n      const isClient = hasDirectives(['client'], operation.query);\n\n      if (!isClient) return forward(operation);\n\n      const server = removeClientSetsFromDocument(operation.query);\n      const { query } = operation;\n      const type =\n        capitalizeFirstLetter(\n          (getMainDefinition(query) || ({} as any)).operation,\n        ) || 'Query';\n\n      const resolver = (fieldName, rootValue = {}, args, context, info) => {\n        //resultKey is where data under the field name is ultimately returned by the server\n        //https://github.com/apollographql/apollo-client/tree/master/packages/graphql-anywhere#resolver-info\n        const fieldValue = rootValue[info.resultKey];\n\n        //If fieldValue is defined, server returned a value\n        if (fieldValue !== undefined) return fieldValue;\n\n        // Look for the field in the custom resolver map\n        const resolverMap = resolvers[(rootValue as any).__typename || type];\n        if (resolverMap) {\n          const resolve = resolverMap[fieldName];\n          if (resolve) return resolve(rootValue, args, context, info);\n        }\n        //TODO: the proper thing to do here is throw an error saying to\n        //add `client.onResetStore(link.writeDefaults);`\n        //waiting on https://github.com/apollographql/apollo-client/pull/3010\n        //Currently with nested fields, this sort of return does not work\n        return defaults[fieldName];\n      };\n\n      return new Observable(observer => {\n        if (server) operation.query = server;\n        const obs =\n          server && forward\n            ? forward(operation)\n            : Observable.of({\n                data: {},\n              });\n\n        const observerErrorHandler = observer.error.bind(observer);\n\n        const sub = obs.subscribe({\n          next: ({ data, errors }) => {\n            const context = operation.getContext();\n            //data is from the server and provides the root value to this GraphQL resolution\n            //when there is no resolver, the data is taken from the context\n            graphql(resolver, query, data, context, operation.variables)\n              .then(nextData => {\n                observer.next({\n                  data: nextData,\n                  errors,\n                });\n                observer.complete();\n              })\n              .catch(observerErrorHandler);\n          },\n          error: observerErrorHandler,\n        });\n\n        return () => {\n          if (sub) sub.unsubscribe();\n        };\n      });\n    }\n  }();\n};\n"],"names":["checkDocument","removeDirectivesFromDocument","Observable","hasDirectives","getMainDefinition","graphql","ApolloLink"],"mappings":"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"}